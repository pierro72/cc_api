package com.ex.demo.carte.controller;

import com.ex.demo.carte.service.VilleService;
import com.ex.demo.carte.service.dto.VilleDTO;
import com.ex.demo.util.HeaderUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;


/**
 * REST controller for managing Ville.
 */
@RestController
@RequestMapping("/api")
public class VilleController {

    private final Logger log = LoggerFactory.getLogger(VilleController.class);

    private static final String ENTITY_NAME = "ville";

    private final VilleService villeService;

    public VilleController(VilleService villeService) {
        this.villeService = villeService;
    }


    /**
     * POST  /ville : Creer une nouvelle ville
     *
     * @param villeDTO : ville a créer
     * @return  ResponseEntity avec status 201 (Creér) et avec le ville dans le body, ou status 400 (Bad Request) si le ville a déja un ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/ville")
    public ResponseEntity<VilleDTO> createVille(@Valid @RequestBody VilleDTO villeDTO) throws URISyntaxException {
        log.debug("requete REST pour sauvegarder Ville : {}", villeDTO);
        VilleDTO result = villeService.save(villeDTO);

        return ResponseEntity.created(
                new URI("/api/ville/" + result.getId()))
                .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
                .body(result);
    }

    /**
     * PUT  /ville : Updates an existing ville.
     *
     * @param villeDTO the villeDTO à metre à jours
     * @return ResponseEntity avec status 200 (OK) et avec le villeDTO mise à jours
     * or with status 400 (Bad Request) if the villeDTO n'est pas valide,
     * or with status 500 (Internal Server Error) if the villeDTO ne peux etre mise à jours
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/ville")
    public ResponseEntity<VilleDTO>       updateVille(@Valid @RequestBody VilleDTO villeDTO) throws URISyntaxException {
        log.debug("requete REST to update Ville : {}", villeDTO);
        if (villeDTO.getId() == null) {
            return createVille(villeDTO);
        }
        VilleDTO result = villeService.save(villeDTO);
        return ResponseEntity.ok()
                .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, villeDTO.getId().toString()))
                .body(result);
    }

    /**
     * GET  /ville : get all the ville.
     *
     * @return ResponseEntity avec status 200 (OK) et la liste des ville dans le body
     */
    @GetMapping("/ville")
    public List<VilleDTO> getAllVille(@RequestParam(value = "search", required = false ) String criteria ) {
        log.debug("requete REST pour obtenir une liste de Ville avec criteria: {}", criteria);
        return villeService.findAll(criteria);
    }

    /**
     * GET  /ville/:id : get the "id" ville.
     *
     * @param id l'id du ville à retourner
     * @return  ResponseEntity avec status 200 (OK) et avec le ville dans le body, ou status 404 (Not Found)
     */

    @GetMapping("/ville/{id}")
    public ResponseEntity<VilleDTO> getVille(@PathVariable Long id) {
        log.debug("requete REST to get Ville : {}", id);
        VilleDTO villeDTO = villeService.findOne(id);
        return new ResponseEntity<>(villeDTO, HttpStatus.FOUND);
    }


    /**
     * DELETE  /ville/:id : supprime le ville avec cette "id".
     *
     * @param id l'id du  ville à supprimer
     * @return ResponseEntity avec status 200 (OK)
     */
    @DeleteMapping("/ville/{id}")
    public ResponseEntity<Void> deleteVille(@PathVariable Long id) {
        log.debug("requete REST to delete Ville : {}", id);
        villeService.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
