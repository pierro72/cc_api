package com.ex.demo.carte.service;

import com.ex.demo.carte.domaine.Ville;
import com.ex.demo.carte.repository.VilleRepository;
import com.ex.demo.carte.service.dto.VilleDTO;
import com.ex.demo.carte.service.mapper.complet.VilleMapper;
import com.ex.demo.carte.specification.VilleSpecification;
import com.ex.demo.util.SearchCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Implementation de service pour  le management de  Ville.
 */
@Service
@Transactional
public class VilleService {

    private final Logger log = LoggerFactory.getLogger(VilleService.class);

    private final VilleRepository villeRepository;

    private final VilleMapper villeMapper;

    public VilleService(VilleRepository villeRepository, VilleMapper villeMapper) {
        this.villeRepository = villeRepository;
        this.villeMapper = villeMapper;
    }

    /**
     * Save a carte.
     *
     * @param villeDTO the entity pour sauvegarder
     * @return the persisted entity
     */
    public VilleDTO save(VilleDTO villeDTO) {
        log.debug("Request pour sauvegarder Ville : {}", villeDTO);
        Ville ville = villeMapper.toEntity(villeDTO);
        ville = villeRepository.save(ville);
        return villeMapper.toDto(ville);
    }

    /**
     * Get all the ville.
     *
     * @return the list of entities
     */
    @Transactional(readOnly = true)
    public List<VilleDTO> findAll(String search) {
        Pattern pattern = Pattern.compile("(\\w+?)(:|<|>)(\\w+?),");
        Matcher matcher = pattern.matcher(search + ",");
        List<SearchCriteria> params = new ArrayList<SearchCriteria>();
        while (matcher.find()) {
            params.add(new SearchCriteria(matcher.group(1), matcher.group(2), matcher.group(3)));
        }
        Specification<Ville> spec = specificationBuild(params);
        List<Ville> villes = villeRepository.findAll(spec);
        return villeMapper.toDto(villes);
    }

    /**
     * Get one ville by id.
     *
     * @param id the id of the entity
     * @return the entity
     */
    @Transactional(readOnly = true)
    public VilleDTO findOne(Long id) {
        log.debug("Request to get Ville : {}", id);
        Ville ville = villeRepository.findOne(id);

        return villeMapper.toDto(ville);
    }

    /**
     * Delete the ville by id.
     *
     * @param id the id of the entity
     */
    public void delete(Long id) {
        log.debug("Request to delete Ville2 : {}", id);
        Ville ville = villeRepository.findOne(id);
        villeRepository.delete(ville);
    }

    private Specification<Ville> specificationBuild(List<SearchCriteria> params ) {
        if (params.size() == 0) { return null; }

        List<Specification<Ville>> specs = new ArrayList<Specification<Ville>>();
        for (SearchCriteria param : params) {
            specs.add(new VilleSpecification(param));
        }

        Specification<Ville> result = specs.get(0);
        for (int i = 1; i < specs.size(); i++) {
            result = Specifications.where(result).and(specs.get(i));
        }
        return result;
    }

}
