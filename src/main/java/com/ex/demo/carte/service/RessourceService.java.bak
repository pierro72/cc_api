package com.ex.demo.carte.service;

import com.ex.demo.carte.domaine.Ressource;
import com.ex.demo.carte.repository.RessourceRepository;
import com.ex.demo.carte.service.dto.RessourceDTO;
import com.ex.demo.carte.service.mapper.complet.RessourceMapper;
import com.ex.demo.carte.specification.RessourceSpecification;
import com.ex.demo.util.SearchCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Implementation de service pour  le management de  Ressource.
 */
@Service
@Transactional
public class RessourceService {

    private final Logger log = LoggerFactory.getLogger(RessourceService.class);

    private final RessourceRepository ressourceRepository;

    private final RessourceMapper ressourceMapper;

    public RessourceService(RessourceRepository ressourceRepository, RessourceMapper ressourceMapper) {
        this.ressourceRepository = ressourceRepository;
        this.ressourceMapper = ressourceMapper;
    }

    /**
     * Save a carte.
     *
     * @param ressourceDTO the entity pour sauvegarder
     * @return the persisted entity
     */
    public RessourceDTO save(RessourceDTO ressourceDTO) {
        log.debug("Request pour sauvegarder Ressource : {}", ressourceDTO);
        Ressource ressource = ressourceMapper.toEntity(ressourceDTO);
        ressource = ressourceRepository.save(ressource);
        return ressourceMapper.toDto(ressource);
    }

    /**
     * Get all the ressource.
     *
     * @return the list of entities
     */
    @Transactional(readOnly = true)
    public List<RessourceDTO> findAll(String search) {
        Pattern pattern = Pattern.compile("(\\w+?)(:|<|>)(\\w+?),");
        Matcher matcher = pattern.matcher(search + ",");
        List<SearchCriteria> params = new ArrayList<SearchCriteria>();
        while (matcher.find()) {
            params.add(new SearchCriteria(matcher.group(1), matcher.group(2), matcher.group(3)));
        }
        Specification<Ressource> spec = specificationBuild(params);
        List<Ressource> ressources = ressourceRepository.findAll(spec);
        return ressourceMapper.toDto(ressources);
    }

    /**
     * Get one ressource by id.
     *
     * @param id the id of the entity
     * @return the entity
     */
    @Transactional(readOnly = true)
    public RessourceDTO findOne(Long id) {
        log.debug("Request to get Ressource : {}", id);
        Ressource ressource = ressourceRepository.findOne(id);

        return ressourceMapper.toDto(ressource);
    }

    /**
     * Delete the ressource by id.
     *
     * @param id the id of the entity
     */
    public void delete(Long id) {
        log.debug("Request to delete Ressource2 : {}", id);
        Ressource ressource = ressourceRepository.findOne(id);
        ressourceRepository.delete(ressource);
    }

    private Specification<Ressource> specificationBuild(List<SearchCriteria> params ) {
        if (params.size() == 0) { return null; }

        List<Specification<Ressource>> specs = new ArrayList<Specification<Ressource>>();
        for (SearchCriteria param : params) {
            specs.add(new RessourceSpecification(param));
        }

        Specification<Ressource> result = specs.get(0);
        for (int i = 1; i < specs.size(); i++) {
            result = Specifications.where(result).and(specs.get(i));
        }
        return result;
    }

}
